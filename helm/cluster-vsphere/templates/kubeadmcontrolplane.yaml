apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: {{ include "resource.default.name" $ }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
  annotations:
    {{- include "helm-keep" . | nindent 4 }}
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        certSANs:
        - localhost
        - 127.0.0.1
        - {{ .Values.connectivity.network.controlPlaneEndpoint.host }}
        - "api.{{ include "resource.default.name" $ }}.{{ .Values.baseDomain }}"
        {{- with .Values.apiServer.certSANs }}
        {{- range . }}
        - {{ . }}
        {{- end }}
        {{- end }}
        extraArgs:
          audit-log-maxage: "30"
          audit-log-maxbackup: "30"
          audit-log-maxsize: "100"
          audit-log-path: /var/log/apiserver/audit.log
          audit-policy-file: /etc/kubernetes/policies/audit-policy.yaml
          cloud-provider: external
          enable-admission-plugins: {{ .Values.apiServer.enableAdmissionPlugins }}
          {{- if $.Values.cluster.enableEncryptionProvider }}
          encryption-provider-config: /etc/kubernetes/encryption/config.yaml
          {{- end }}
          feature-gates: {{ .Values.apiServer.featureGates }}
          kubelet-preferred-address-types: "InternalIP"
          logtostderr: "true"
          {{- if .Values.oidc.issuerUrl }}
          {{- with .Values.oidc }}
          oidc-issuer-url: {{ .issuerUrl }}
          oidc-client-id: {{ .clientId }}
          oidc-username-claim: {{ .usernameClaim }}
          oidc-groups-claim: {{ .groupsClaim }}
          {{- if .usernamePrefix }}
          oidc-username-prefix: {{ .usernamePrefix | quote }}
          {{- end }}
          {{- if .caFile }}
          oidc-ca-file: {{ .caFile }}
          {{- end }}
          {{- end }}
          {{- end }}
          profiling: "false"
          requestheader-allowed-names: "front-proxy-client"
          runtime-config: "api/all=true"
          tls-cipher-suites: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
        extraVolumes:
          - name: auditlog
            hostPath: /var/log/apiserver
            mountPath: /var/log/apiserver
            pathType: DirectoryOrCreate
          - name: policies
            hostPath: /etc/kubernetes/policies
            mountPath: /etc/kubernetes/policies
            pathType: DirectoryOrCreate
          {{- if $.Values.cluster.enableEncryptionProvider }}
          - name: encryption
            hostPath: /etc/kubernetes/encryption
            mountPath: /etc/kubernetes/encryption
            readOnly: false
            pathType: DirectoryOrCreate
          {{- end }}
      controllerManager:
        extraArgs:
          authorization-always-allow-paths: "/healthz,/readyz,/livez,/metrics"
          bind-address: "0.0.0.0"
          cloud-provider: external
          enable-hostpath-provisioner: "true"
          feature-gates: {{ .Values.controllerManager.featureGates }}
          logtostderr: "true"
          profiling: "false"
      dns:
        imageRepository: {{ .Values.controlPlane.dns.imageRepository }}
        imageTag: {{ .Values.controlPlane.dns.imageTag }}
      etcd:
        local:
          extraArgs:
            listen-metrics-urls: "http://0.0.0.0:2381"
          imageRepository: {{ .Values.controlPlane.etcd.imageRepository }}
          imageTag: {{ .Values.controlPlane.etcd.imageTag }}
      imageRepository: {{ .Values.controlPlane.image.repository }}
      {{- include "sshUsers" . | nindent 4 }}
    initConfiguration:
      skipPhases:
        - addon/coredns
        - addon/kube-proxy
      patches:
        directory: "/tmp/kubeadm/patches"
      nodeRegistration:
        criSocket: /run/containerd/containerd.sock
        kubeletExtraArgs:
          {{- include "kubeletExtraArgs" . | nindent 10}}
    joinConfiguration:
      patches:
        directory: "/tmp/kubeadm/patches"
      nodeRegistration:
        criSocket: /run/containerd/containerd.sock
        kubeletExtraArgs:
          {{- include "kubeletExtraArgs" . | nindent 10}}
    files:
      {{- include "sshFiles" . | nindent 6}}
      {{- include "auditLogFiles" . | nindent 6 }}
      {{- if $.Values.proxy.enabled }}
      {{- include "containerdProxyConfig" . | nindent 6}}
      {{- end }}
      {{- include "registryFiles" . | nindent 6 }}
      {{- range $kubeadmPatch, $_ :=  .Files.Glob  "files/etc/patches/**" }}
      - path: {{ (printf "/tmp/kubeadm/patches/%s" (base $kubeadmPatch)) }}
        content: |-
          {{- $.Files.Get $kubeadmPatch | nindent 10 }}
      {{- end }}
      {{- if $.Values.cluster.enableEncryptionProvider }}
      - path: /etc/kubernetes/encryption/config.yaml
        permissions: "0600"
        contentFrom:
          secret:
            name: {{ include "resource.default.name" $ }}-encryption-provider-config
            key: encryption
      {{- end }}
      - content: |
          apiVersion: v1
          kind: Pod
          metadata:
            creationTimestamp: null
            name: kube-vip
            namespace: kube-system
          spec:
            containers:
            - args:
              - start
              env:
              - name: vip_arp
                value: "true"
              - name: vip_leaderelection
                value: "true"
              - name: vip_address
                value: {{ .Values.connectivity.network.controlPlaneEndpoint.host }}
              - name: vip_interface
                value: eth0
              - name: vip_leaseduration
                value: "15"
              - name: vip_renewdeadline
                value: "10"
              - name: vip_retryperiod
                value: "2"
              image: ghcr.io/kube-vip/kube-vip:v0.3.5
              imagePullPolicy: IfNotPresent
              name: kube-vip
              resources: {}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - SYS_TIME
              volumeMounts:
              - mountPath: /etc/kubernetes/admin.conf
                name: kubeconfig
            hostNetwork: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/admin.conf
                type: FileOrCreate
              name: kubeconfig
          status: {}
        owner: root:root
        path: /etc/kubernetes/manifests/kube-vip.yaml
    preKubeadmCommands:
      # - bash /tmp/kubeadm/patches/kube-apiserver-patch.sh {{ .Values.controlPlane.resourceRatio }}
      - /bin/test ! -d /var/lib/kubelet && (/bin/mkdir -p /var/lib/kubelet && /bin/chmod 0750 /var/lib/kubelet)
      {{- include "hostsAndHostname" . | nindent 6 }}
      {{- if $.Values.proxy.enabled }}
      - systemctl daemon-reload
      - systemctl restart containerd
      {{- end }}
    postKubeadmCommands:
      {{- include "sshPostKubeadmCommands" . | nindent 6 }}
    useExperimentalRetryJoin: true
  machineTemplate:
    infrastructureRef:
      apiVersion: {{ include "infrastructureApiVersion" . }}
      kind: VSphereMachineTemplate
      name: {{ include "resource.default.name" . }}-control-plane-{{ include "mtRevisionByControlPlane" $ }}
      namespace: {{ .Release.Namespace }}
  replicas: {{ .Values.controlPlane.replicas }}
  version: {{ .Values.cluster.kubernetesVersion }}
